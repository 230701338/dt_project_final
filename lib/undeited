import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import './firebase_options.dart';
import 'screens/login_screen.dart';
import 'package:provider/provider.dart';
import 'providers/cart_provider.dart';


void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(
    ChangeNotifierProvider(
      create: (context) => CartProvider(),
      child: const MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Grocery Haven',
      theme: ThemeData(primarySwatch: Colors.green),
      home: const LoginScreen(), // Start with login screen
    );
  }
}





--------------bluetooth code ---------

import 'dart:convert';
import 'package:flutter_bluetooth_serial/flutter_bluetooth_serial.dart';
import 'package:flutter/material.dart';

class BluetoothService with ChangeNotifier {
  BluetoothConnection? _connection;
  bool isConnected = false;
  String incomingRFID = "";

  Map<String, int> productCounts = {
    "TAG123": 0,
    "TAG456": 0,
    // Add more tags if needed
  };

  BluetoothService() {
    _connectToBluetooth();
  }

  Map<String, int> getProductCounts() => productCounts;

  void _connectToBluetooth() async {
    try {
      BluetoothConnection.toAddress("00:21:13:00:00:00").then((_connection) {
        _connection = _connection;
        isConnected = true;
        print('Connected to Bluetooth device');

        _connection.input!.listen((data) {
          String receivedData = utf8.decode(data).trim();
          print("Received: $receivedData");
          incomingRFID = receivedData;
          _updateProductCount(receivedData);
          notifyListeners(); // Notify UI
        }).onDone(() {
          print('Disconnected by remote');
          isConnected = false;
          notifyListeners();
        });

        _connection = _connection;
      });
    } catch (e) {
      print("Connection failed: $e");
    }
  }

  void _updateProductCount(String tag) {
    if (productCounts.containsKey(tag)) {
      productCounts[tag] = productCounts[tag]! + 1;
    } else {
      productCounts[tag] = 1;
    }
    notifyListeners(); // Update product page
  }
}
-------------------------------------------
main 
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/cart_provider.dart';

import 'cart_screen.dart';
import 'items_screen.dart';
import 'profile_screen.dart';
import 'login_screen.dart';

class HomeScreen extends StatelessWidget {
  const HomeScreen({super.key});

  @override
  Widget build(BuildContext context) {
    var cart = Provider.of<CartProvider>(context);
    final size = MediaQuery.of(context).size;

    return Scaffold(
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        elevation: 0,
        backgroundColor: Colors.transparent,
        title: const Text(
          "ShopSmart",
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
            letterSpacing: 1.2,
          ),
        ),
        actions: [
          Stack(
            alignment: Alignment.center,
            children: [
              IconButton(
                icon: const Icon(Icons.shopping_cart_outlined, size: 28),
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => CartScreen()),
                  );
                },
              ),
              if (cart.items.isNotEmpty)
                Positioned(
                  top: 8,
                  right: 8,
                  child: Container(
                    padding: const EdgeInsets.all(4),
                    decoration: BoxDecoration(
                      color: Colors.redAccent,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    constraints: const BoxConstraints(
                      minWidth: 18,
                      minHeight: 18,
                    ),
                    child: Text(
                      '${cart.items.length}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
            ],
          ),
          IconButton(
            icon: CircleAvatar(
              radius: 16,
              backgroundColor: Colors.indigo.shade300,
              child: const Icon(
                Icons.person,
                size: 20,
                color: Colors.white,
              ),
            ),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => const ProfileScreen()),
              );
            },
          ),
          const SizedBox(width: 8),
        ],
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            colors: [Colors.indigo.shade800, Colors.deepPurple.shade900],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
        child: SafeArea(
          child: Padding(
            padding: const EdgeInsets.symmetric(horizontal: 20.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 20),
                Text(
                  "Hello, User!",
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.9),
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  "What would you like to do today?",
                  style: TextStyle(
                    color: Colors.white.withOpacity(0.7),
                    fontSize: 16,
                  ),
                ),
                const SizedBox(height: 40),
                Expanded(
                  child: GridView.count(
                    crossAxisCount: 2,
                    childAspectRatio: 0.85,
                    crossAxisSpacing: 16,
                    mainAxisSpacing: 16,
                    children: [
                      _buildFeatureCard(
                        title: "Browse Items",
                        icon: Icons.shopping_bag_outlined,
                        description: "Choose from catalog",
                        color: Colors.teal,
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => const ItemsScreen(),
                            ),
                          );
                        },
                      ),
                      _buildFeatureCard(
                        title: "My Cart",
                        icon: Icons.shopping_cart_outlined,
                        description: "${cart.items.length} items",
                        color: Colors.redAccent,
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => CartScreen()),
                          );
                        },
                      ),
                      _buildFeatureCard(
                        title: "Profile",
                        icon: Icons.person_outline,
                        description: "Account settings",
                        color: Colors.blueAccent,
                        onTap: () {
                          Navigator.push(
                            context,
                            MaterialPageRoute(builder: (context) => const ProfileScreen()),
                          );
                        },
                      ),
                    ],
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.only(bottom: 16.0),
                  child: Center(
                    child: TextButton.icon(
                      icon: const Icon(Icons.logout, size: 20),
                      label: const Text("Logout"),
                      style: TextButton.styleFrom(
                        foregroundColor: Colors.white70,
                      ),
                      onPressed: () {
                        showDialog(
                          context: context,
                          builder: (context) => AlertDialog(
                            title: const Text("Confirm Logout"),
                            content: const Text("Are you sure you want to logout?"),
                            actions: [
                              TextButton(
                                child: const Text("Cancel"),
                                onPressed: () => Navigator.pop(context),
                              ),
                              ElevatedButton(
                                style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.redAccent,
                                ),
                                child: const Text("Logout"),
                                onPressed: () {
                                  Navigator.pop(context);
                                  Navigator.pushReplacement(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => const LoginScreen(),
                                    ),
                                  );
                                },
                              ),
                            ],
                          ),
                        );
                      },
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildFeatureCard({
    required String title,
    required IconData icon,
    required String description,
    required Color color,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white.withOpacity(0.9),
          borderRadius: BorderRadius.circular(20),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 10,
              spreadRadius: 2,
            ),
          ],
        ),
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(
                icon,
                size: 48,
                color: color,
              ),
              const SizedBox(height: 16),
              Text(
                title,
                style: const TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 8),
              Text(
                description,
                style: TextStyle(
                  fontSize: 14,
                  color: Colors.grey.shade700,
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }
}
---------------------------------
import 'package:flutter/material.dart';

class CartProvider extends ChangeNotifier {
  final Map<String, CartItem> _items = {};

  Map<String, CartItem> get items => _items;

  int getQuantity(String productId) {
    return _items[productId]?.quantity ?? 0;
  }

  double get totalPrice {
    return _items.values.fold(0, (sum, item) => sum + (item.price * item.quantity));
  }

  void updateItem(String id, String name, int price, String imageUrl, int stock, bool increase, BuildContext context) {
    if (increase) {
      if (_items.containsKey(id)) {
        if (_items[id]!.quantity < stock) {
          _items[id] = _items[id]!.copyWith(quantity: _items[id]!.quantity + 1);
        } else {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text("Cannot add more than available stock!")),
          );
        }
      } else {
        if (stock > 0) {
          _items[id] = CartItem(id: id, name: name, price: price, quantity: 1, imageUrl: imageUrl);
        }
      }
    } else {
      if (_items.containsKey(id) && _items[id]!.quantity > 1) {
        _items[id] = _items[id]!.copyWith(quantity: _items[id]!.quantity - 1);
      } else {
        _items.remove(id);
      }
    }

    notifyListeners();
  }
}

class CartItem {
  final String id;
  final String name;
  final int price;
  final int quantity;
  final String imageUrl;

  CartItem({required this.id, required this.name, required this.price, required this.quantity, required this.imageUrl});

  CartItem copyWith({int? quantity}) {
    return CartItem(
      id: id,
      name: name,
      price: price,
      quantity: quantity ?? this.quantity,
      imageUrl: imageUrl,
    );
  }
}
--------------------------------
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/cart_provider.dart';
import 'payment_screen.dart';

class ItemsScreen extends StatelessWidget {
  final String? scannedBarcode;

  const ItemsScreen({super.key, this.scannedBarcode});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text("Products")),
      body: StreamBuilder<QuerySnapshot>(
        stream: FirebaseFirestore.instance.collection('products').snapshots(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return const Center(child: CircularProgressIndicator());
          }
          if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {
            return const Center(child: Text("No products available"));
          }

          final cart = Provider.of<CartProvider>(context, listen: false);
          var products = snapshot.data!.docs;

          if (scannedBarcode != null && scannedBarcode!.isNotEmpty) {
            products = products.where((doc) {
              var data = doc.data() as Map<String, dynamic>?;
              return data != null && data['barcode'] == scannedBarcode;
            }).toList();
          }

          return ListView.builder(
            itemCount: products.length,
            itemBuilder: (context, index) {
              var doc = products[index];
              var data = doc.data() as Map<String, dynamic>?;

              if (data == null) return const SizedBox();

              final String id = doc.id;
              final String name = data['name'] ?? 'Unnamed Product';
              final String imageUrl = data['image'] ?? '';
              final int price = (data['price'] as num?)?.toInt() ?? 0;
              final int stock = (data['stock'] as num?)?.toInt() ?? 0;
              final int scannedCount = (data['count'] as num?)?.toInt() ?? 0;

              // 🔄 Sync scanned count with cart
              WidgetsBinding.instance.addPostFrameCallback((_) {
                final int cartQty = cart.getQuantity(id);
                if (scannedCount > cartQty) {
                  // Add the missing quantity to cart
                  final int toAdd = scannedCount - cartQty;
                  for (int i = 0; i < toAdd; i++) {
                    cart.updateItem(id, name, price, imageUrl, stock, true, context);
                  }
                } else if (scannedCount < cartQty) {
                  // Remove extra quantity (just in case)
                  final int toRemove = cartQty - scannedCount;
                  for (int i = 0; i < toRemove; i++) {
                    cart.updateItem(id, name, price, imageUrl, stock, false, context);
                  }
                }
              });

              return Card(
                margin: const EdgeInsets.all(10),
                child: ListTile(
                  leading: imageUrl.isNotEmpty
                      ? Image.network(imageUrl, width: 50, height: 50, fit: BoxFit.cover)
                      : const Icon(Icons.image_not_supported, size: 50),
                  title: Text(name, style: const TextStyle(fontWeight: FontWeight.bold)),
                  subtitle: Consumer<CartProvider>(
                    builder: (context, cart, child) {
                      final int cartQuantity = cart.getQuantity(id);
                      return Text("Price: ₹$price | Stock: ${stock - cartQuantity} | Scanned: $scannedCount");
                    },
                  ),
                  trailing: Consumer<CartProvider>(
                    builder: (context, cart, _) {
                      final int cartQuantity = cart.getQuantity(id);
                      return stock == 0
                          ? const Text("Out of Stock", style: TextStyle(color: Colors.red))
                          : Row(
                              mainAxisSize: MainAxisSize.min,
                              children: [
                                IconButton(
                                  icon: const Icon(Icons.remove),
                                  onPressed: cartQuantity > 0
                                      ? () => cart.updateItem(id, name, price, imageUrl, stock, false, context)
                                      : null,
                                ),
                                Text("$cartQuantity"),
                                IconButton(
                                  icon: const Icon(Icons.add),
                                  onPressed: cartQuantity < stock
                                      ? () => cart.updateItem(id, name, price, imageUrl, stock, true, context)
                                      : null,
                                ),
                              ],
                            );
                    },
                  ),
                ),
              );
            },
          );
        },
      ),
      bottomNavigationBar: Consumer<CartProvider>(
        builder: (context, cart, child) => Container(
          padding: const EdgeInsets.all(16),
          color: Colors.white,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text("Total: ₹${cart.totalPrice}", style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
              ElevatedButton(
                onPressed: cart.totalPrice > 0
                    ? () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => PaymentScreen(amount: cart.totalPrice.toInt()),
                          ),
                        );
                      }
                    : null,
                style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
                child: const Text("Proceed to Pay"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
